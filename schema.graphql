# TribalChief
type TribalChief @entity {
  # Contract address
  id: ID!

  # Bonus multiplier
  rewardMultiplier: BigInt!

  # Start block
  startBlock: BigInt!

  # Tribe
  tribe: Bytes!

  # Tribe per block
  tribePerBlock: BigInt!

  # Total allocation point
  totalAllocPoint: BigInt!

  # Pools
  # pools: [Pool!]! @derivedFrom(field: "owner")

  # Pool count
  poolCount: BigInt!

  # History
  # history: [History!]! @derivedFrom(field: "owner")

  # Upated at
  updatedAt: BigInt!
}

type History @entity {
  # Master chef id concatenated with timestamp
  id: ID!

  # Owner (TribalChief, Pool, or User).
  owner: TribalChief!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}

# Pool
type Pool @entity {
  # Index of pool in poolInfo on TribalChief contract
  id: ID!

  # Owner
  owner: TribalChief!

  # Staked Token Address
  stakedToken: Bytes!

  # Rewarder contract address
  rewarder: Bytes!

  virtualTotalSupply: BigInt!

  # Allocation point
  allocPoint: BigInt!

  # Last reward block
  lastRewardBlock: BigInt!

  # Accumulated tribe per share
  accTribePerShare: BigInt!

  # unlocked status
  unlocked: Boolean!

  # staked token balance
  balance: BigInt!

  # Pool users
  # users: [User!]! @derivedFrom(field: "pool")

  # User count
  userCount: BigInt!

  # Token Balance
  tokenBalance: BigDecimal!

  # SLP Age
  tokenAge: BigDecimal!

  # SLP Removed
  tokenAgeRemoved: BigDecimal!

  # Token Deposited
  tokenDeposited: BigDecimal!

  # SLP Withdrawn
  tokenWithdrawn: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Upated at
  updatedAt: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Tribe harvested
  tribeHarvested: BigDecimal!

  # Tribe harvested
  tribeHarvestedUSD: BigDecimal!
}

type PoolHistory @entity {
  # Pool id concatenated with timestamp
  id: ID!

  # Pool
  pool: Pool!

  # SLP Balance
  tokenBalance: BigDecimal!

  # SLP Age
  tokenAge: BigDecimal!

  # SLP Removed
  tokenAgeRemoved: BigDecimal!

  # SLP Deposited
  tokenDeposited: BigDecimal!

  # SLP Withdrawn
  tokenWithdrawn: BigDecimal!

  # User Count
  userCount: BigInt!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Tribe harvested
  tribeHarvested: BigDecimal!

  # Tribe harvested
  tribeHarvestedUSD: BigDecimal!
}

type User @entity {
  # Pool id concatenated with user address
  id: ID!

  # User address
  address: Bytes!

  # Related pool
  pool: Pool

  # We do some fancy math here. Basically, any point in time, the amount of SUSHIs
  # entitled to a user but is pending to be distributed is:
  # pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt
  # Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
  # 1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.
  # 2. User receives the pending reward sent to his/her address.
  # 3. User's `amount` gets updated.
  # 4. User's `rewardDebt` gets updated.

  # Amount
  amount: BigInt!

  # Reward debt
  rewardDebt: BigInt!

  # virtualAmount
  virtualAmount: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Sushi harvested
  tribeHarvested: BigDecimal!

  # Tribe harvested
  tribeHarvestedUSD: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}